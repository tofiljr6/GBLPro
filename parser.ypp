%{
#include <iostream>
#include <string>
#include <unordered_map>
#include <memory>
#include <fstream>
#include <streambuf>
#include <stdlib.h>

#include "code.hpp"
#include "data.hpp"
#include "symbol.hpp"

using namespace std;

int yylex();
int yyerror(string);
extern FILE *yyin;
extern int yylineno;
int error = 0;

shared_ptr<Data> datacode = make_shared<Data>();
shared_ptr<Code> code = make_shared<Code>(datacode);

%}

%code requires {
    #include "symbol.hpp"
    #include "labels.hpp"
}

%union sem_rec {
    std::string* pidentifier;
    long long num;
    symbol* sym;
    cond_label* label;
}

%start program
%token VAR TBEGIN END
%token <label> IF WHILE DO REPEAT
%token UNTIL
%token THEN ELSE ENDIF FROM TO DOWNTO ENDFOR ENDWHILE
%token READ WRITE
%token LE GE LEQ GEQ EQ NEQ
%token ASSIGN
%token ERROR
%token <pidentifier> pidentifier
%token <num> num

%left PLUS MINUS
%left TIMES DIV MOD

%type <sym> value
%type <sym> expression
%type <sym> identifier
%type <label> condition

%%

program:        VAR declarations TBEGIN commands END                        { code->end_code(); } 
              | TBEGIN commands END                                         { code->end_code(); }
;

declarations:   declarations',' pidentifier                                 { datacode->put_symbol(*$3, false); }
              | declarations',' pidentifier'['num':'num']'                  { datacode->put_array(*$3, $5, $7); }
              | pidentifier                                                 { datacode->put_symbol(*$1, false); }
              | pidentifier'['num':'num']'                                  { datacode->put_array(*$1, $3, $5); }
;              

commands:       commands command
              | command
;              

command:        identifier ASSIGN expression';'                             { code->assign($1); }
              | IF condition THEN commands                                  { $1 = code->if_else_first_block($2); }
                ELSE commands ENDIF                                         { code->if_else_second_block($1); }
              | IF condition THEN commands ENDIF                            { code->if_block($2); }
              | WHILE condition DO commands ENDWHILE                        { code->while_block($2); }
              | REPEAT                                                      { $1 = code->repeat_until_first_block(); }
                commands UNTIL condition                                    { code->repeat_until_second_block($1, $5); }
              | READ identifier';'                                          { code->read($2); }
              | WRITE value';'                                              { code->write($2); }
;              

expression:     value                                                       { code->load_value($1); }
              | value PLUS value                                            { code->plus($1, $3); }
              | value MINUS value                                           { code->minus($1, $3); }
              | value TIMES value                                           { code->times($1, $3); }
              | value DIV value                                             { code->div($1, $3); }
              | value MOD value                                             { code->mod($1, $3); }
;

condition:      value EQ value                                              { $$ = code->eq($1, $3); }
              | value NEQ value                                             { $$ = code->neq($1, $3); }
              | value LE value                                              { $$ = code->le($1, $3); }
              | value GE value                                              { $$ = code->ge($1, $3); }
              | value LEQ value                                             { $$ = code->leq($1, $3); }
              | value GEQ value                                             { $$ = code->geq($1, $3);; }
;

value:          num                                                         { $$ = code->get_num($1); }
              | identifier                                                  { $$ = $1; }
;

identifier:     pidentifier                                                 { $$ = code->pidentifier(*$1); }
              | pidentifier'['pidentifier']'                                { $$ = code->array_pid_pidentifier(*$1, *$3); }
              | pidentifier'['num']'                                        { $$ = code->array_num_pidentifier(*$1, $3); }
;
%%


int yyerror(string str) {
    cerr << str << " at line " << yylineno << endl;
    exit(1);
}

void return_code(vector<string> code, string file) {
    ofstream fout(file);

    vector<string>::iterator it;

    for (it = code.begin(); it != code.end(); it++) {
        fout << *it << endl;
    }

    fout.close();
}

int main(int argc, char** argv) {
    if (argc < 3) {
        cerr << "Not enough arguments" << endl;
        cout << "compiler [input_file] [output_file]" << endl;
        return 1;
    }

    yyin = fopen(argv[1], "r");

    if (yyin == nullptr) {
        return 2;
    }

    cout << "### Starting compilation ###" << endl; 

    try {
        yyparse();
        return_code(code->get_code(), argv[2]);
        cout << "### Compiled successfully ###" << endl;
    } catch (string e) {
        yyerror(e);
    }
    datacode->print_symbols();

    return 0;
}